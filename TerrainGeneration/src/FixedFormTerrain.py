import numpy as np
import matplotlib.pyplot as plt
import math
from typing import Tuple
from matplotlib import cm
from matplotlib.colors import LightSource


# The FixedFormTerrainGenerator class generates terrain height maps using 
# cosine, sine, or same height functions.
class FixedFormTerrainGenerator:
    """
        Constructor function.
        
        :param freq: The frequency of the wave, measured in Hertz (Hz)
        :type freq: float
        
        :param shape: The shape parameter is an tuple that represents the size of the terrain that will
        be generated. It determines the number of data points that will be generated for the waveform
        :type shape: Tuple[int, int]
        
        :param num_of_period: The number of periods of the wave to generate. A period is the time it
        takes for the wave to complete one full cycle
        :type num_of_period: int
        
        :param min_height: The minimum height value for the waveform. If not specified, it defaults to
        0, defaults to 0
        :type min_height: int (optional)
        
        :param max_height: The maximum height value that can be generated by the waveform. This
        parameter is optional and has a default value of 255, defaults to 255
        :type max_height: int (optional)
    """
    def __init__(self,
                 freq: float,
                 shape: Tuple[int, int],
                 num_of_period: int,
                 min_height: int = 0,
                 max_height: int = 255):
        self.freq = freq
        self.shape = shape
        self.num_of_period = num_of_period
        self.min_height = min_height
        self.max_height = max_height
        assert self.min_height <= self.max_height

    def _visualize2D(self, x, height, T, num_of_period):
        """
        This function visualizes a scatter plot of height values over time periods.
        
        :param x: The x-axis values for the scatter plot. It could be time or any other variable that is
        being plotted against the height values
        :param height: The height parameter is a list or array containing the height values at 
        different time intervals
        :param T: T is a variable representing the period of the data being visualized
        :param num_of_period: the variable represents the number of periods to be
        visualized in the plot
        """
        plt.figure(figsize=(30, 8))
        plt.scatter(x, height[0], marker='x', c='darkblue')
        plt.xlim(0, num_of_period * T)
        plt.show()

    def _visualize3D(self, height):
        
        x = np.arange(0, height.shape[0], 1)
        y = np.arange(0, height.shape[1], 1)
        x, y = np.meshgrid(x, y)
        z = height

        # Set up plot
        fig, ax = plt.subplots(figsize=(10, 10), subplot_kw=dict(projection='3d'))
        ls = LightSource(270, 45)
        # To use a custom hillshading mode, override the built-in shading and pass
        # in the rgb colors of the shaded surface calculated from "shade".
        rgb = ls.shade(height, cmap=cm.gist_earth, vert_exag=0.1, blend_mode='soft')
        surf = ax.plot_surface(x, y, z, rstride=1, cstride=1, facecolors=rgb,
                               linewidth=0, antialiased=False, shade=False)
        ax.set_zlim(self.min_height, self.max_height * 4)

        plt.show()

    def _cosine_height_generate(self, visual=False):
        """
        This function generates a 2D numpy array of cosine wave heights, the function allows to
        optionally visualize the result.
        
        :param visual: A boolean parameter that determines whether to visualize the generated height map
        or not. If set to True, the function will display a plot of the generated height map, defaults
        to False (optional)
        
        :return: a 2D numpy array of shape (size, size) containing the generated height values for a
        cosine wave. If the `visual` parameter is set to True, it also visualizes the generated wave.
        """
        height = np.zeros(self.shape, dtype=np.uint8)
        w = 2 * math.pi * self.freq
        T = 2 * math.pi / w
        x = np.linspace(0, self.num_of_period * T, num=self.shape[1])
        for i in range(self.shape[1]):
            height[i] = [(self.max_height-self.min_height) * ((math.cos(w * x_i) + 1.0) / 2.0)
                         + self.min_height for x_i in x]

        if visual=='2d':
            self._visualize2D(x, height, T, self.num_of_period)
        elif visual=='3d':
            self._visualize3D(height)

        return height

    def _sine_height_generate(self, visual=False):
        """
        This function generates a 2D numpy array of sine wave heights with specified parameters and can
        optionally visualize the result.
        
        :param visual: A boolean parameter that determines whether to visualize the generated sine wave
        or not. If set to True, the function will call the `_visualize` method to display the generated
        wave. If set to False, the function will only return the generated height array, defaults to
        False (optional)
        :return: a numpy array of shape (size, size) containing the heights of a sine wave with the
        specified frequency, number of periods, maximum height, and minimum height. If the visual
        parameter is set to True, it also visualizes the generated wave.
        """
        height = np.zeros(self.shape, dtype=np.uint8)
        w = 2 * math.pi * self.freq
        T = 2 * math.pi / w
        x = np.linspace(0, self.num_of_period * T, num=self.shape[1])
        for i in range(self.shape[1]):
            height[i] = [(self.max_height - self.min_height) * ((math.sin(w * x_i) + 1.0) / 2.0)
                         + self.min_height for x_i in x]

        if visual=='2d':
            self._visualize2D(x, height, T, self.num_of_period)
        elif visual=='3d':
            self._visualize3D(height)

        return height

    def _same_height_generate(self, same_height):
        """
        This function generates a 2D numpy array with a specified height value for all elements.
        
        :param same_height: same_height is a parameter that represents the height value that will be
        assigned to all cells in a square grid of size `size x size`. The function
        `_same_height_generate` creates this grid and assigns the same height value to all cells. The
        resulting grid is returned as a numpy array of
        :return: a NumPy array of shape (size, size) with all elements set to the value of the input
        parameter `same_height`.
        """
        height = np.ones((self.size, self.size), dtype=np.uint8)
        height = height * same_height

        return height

    def generate(self, kind='cosine', same_height=None, visual=False):
        if kind == 'cosine':
            return self._cosine_height_generate(visual=visual)
        elif kind == 'sine':
            return self._sine_height_generate(visual=visual)
        elif kind == 'same':
            if same_height == None:
                print("[Warning] Creating a all-same-height matrix without setting the parameter `same_height`, by default the matrix will create one with all values equal to 255")
                revised_same_height = 255
                return self._same_height_generate(same_height=revised_same_height)
            else:
                return self._same_height_generate(same_height=same_height)
        else:
            print("[Error] Parameter error: please choose from 'cosine', 'sine', 'same'")
